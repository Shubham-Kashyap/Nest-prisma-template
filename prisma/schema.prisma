// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model
enum Role {
  user
  admin
}

enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  FAILED
}

model User {
  id              String            @id() @default(uuid())
  firstName       String?           @map("first_name")
  lastName        String?           @map("last_name")
  email           String            @unique() @db.VarChar(255)
  password        String            @db.VarChar(255)
  isEmailVerified Boolean           @default(false) @map("is_email_verified")
  role            Role              @default(user)
  userToken       String?           @unique() @map("user_token")
  Review          Review[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  orders          Order[]
  shippingAddress ShippingAddress[]
  Cart            Cart[]

  @@map("users")
}

// Product model
model Product {
  id                 String                 @id() @default(cuid())
  title              String
  description        String                 @db.Text
  price              Float
  discountPercentage Int?
  stock              Int                    @default(0)
  isDeleted          Boolean                @map("is_deleted")
  brand              String
  thumbnail          String
  images             Image[]                @relation("ProductImages")
  reviews            Review[]
  category           Category               @relation(fields: [categoryId], references: [id])
  highlights         ProductHighlight[] // can have multiple highlights
  specifications     ProductSpecification[] // can have multiple specifications 

  // foreign keys
  // ratingId        String @map("rating_id")
  categoryId String @map("category_id")
  // highlightId     String @map("highlight_id")
  // specificationId String @map("specification_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orders OrderProduct[]
  Cart   Cart[]

  @@map("products")
}

// Review model
model Review {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // foreign keys 
  userId    String @map("user_id")
  productId String @map("product_id")

  @@map("reviews")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // relations
  product Product[] // a category can have multiple products associated with it 

  @@map("categories")
}

model Cart {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // foreign keys 
  userId    String @map("user_id")
  productId String @map("product_id")

  @@map("cart")
}

model Image {
  id  String @id @default(uuid())
  url String

  // foreign keys
  productId String @map("product_id")

  // relations 
  product Product @relation("ProductImages", fields: [productId], references: [id])

  @@map("images")
}

model ProductHighlight {
  id          String @id @default(uuid())
  title       String
  description String @db.Text

  // foreign keys
  productId String @map("product_id")

  // relations
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_highlights")
}

model ProductSpecification {
  id          String @id @default(uuid())
  title       String
  description String @db.Text

  // foreign keys 
  productId String @map("product_id")

  // relations
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_specifications")
}

model Order {
  id              String          @id @default(cuid())
  user            User            @relation(fields: [userId], references: [id])
  products        OrderProduct[] // represents the link between orders and products
  orderAmount     Float           @map("order_amount") // changed type to Float for monetary value
  shippingAddress ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  deliveryStatus  DeliveryStatus  @map("delivery_status")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  // foreign keys 
  userId            String @map("user_id")
  shippingAddressId String @map("shipping_address_id")

  @@map("orders")
}

model OrderProduct {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @map("order_id")
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_products") // added mapping for clarity
}

model ShippingAddress {
  id        String   @id @default(uuid())
  name      String
  street    String
  city      String
  zip       String
  country   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  orders    Order[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("shipping_addresses")
}

model Country {
  id        Int    @id @default(autoincrement())
  name      String
  codeName  String @map("code_name")
  phoneCode String @map("phone_code")
  region    String
  timezone  String

  // relation
  states State[]

  @@map("countries")
}

model State {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  lat       String
  long      String
  country   Country? @relation(fields: [countryId], references: [id])
  countryId Int?
  cities    City[]

  @@map("states")
}

model City {
  id   Int    @id @default(autoincrement())
  name String
  lat  String
  long String

  // relation
  state   State @relation(fields: [stateId], references: [id])
  stateId Int

  @@map("cities")
}
